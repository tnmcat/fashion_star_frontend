 {/* Search start */}
                        <div className="flex md:order-2 w-[200px] pl-[100px]">
                            <div className="relative md:block">
                                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                    <svg
                                        className="w-4 h-4 text-gray-500 dark:text-gray-400"
                                        aria-hidden="true"
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="none"
                                        viewBox="0 0 20 20"
                                    >
                                        <path
                                            stroke="currentColor"
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth="2"
                                            d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"
                                        />
                                    </svg>
                                    <span className="sr-only">Search icon</span>
                                </div>
                                <form onSubmit={handleSubmit}>
                                    <input
                                        onChange={(e) => {
                                            handleChange(e);
                                        }}
                                        name="search_name"
                                        className="block p-2 pl-10 rounded-lg text-sm border w-[240px] border-gray-300"
                                        placeholder="Search..."
                                    ></input>
                                </form>
                            </div>
                        </div>
                        {/* Search end */}



//handle
const searchParams = useSelector((state) => state.sellerStore.searchParams);
 const handleChange = (e) => {
        dispatch(setSearchParams(e.target.value));
    };

//search
      const handleSubmit = async (e) => {
        e.preventDefault();
        navigate(`/store/${storeInfo.id}/search`);
        dispatch(setSearchParamsResult(searchParams));
        window.history.pushState(null, null, `?search_name=${searchParams}`);

        await axios
            .get(
                `http://localhost:5454/api/stores/${storeInfo.id}/product?name=${searchParams}`
            )
            .then((res) => {
                dispatch(setSearchProducts(res.data));
                console.log(res.data);
            })
            .catch((err) => {
                throw err;
            });
    };


    sellerStoreSlice.js//
    export const {

          setSearchProducts,
  setSearchParams,
  setSearchParamsResult,
    } = sellerStoreSlice.actions;



const initialState = {
  searchProducts: [],
  searchParams: "",
  searchParamsResult: "",
  loading: false,
  error: null,
  success: false,
}
    export const sellerStoreSlice = createSlice({
  name: "sellerStore",
  initialState,
  reducers: {
    setLoading: (state, action) => {
      state.loading = action.payload;
    },
    setError: (state, action) => {
      state.error = action.payload;
    },
    setSuccess: (state, action) => {
      state.success = action.payload;
    },
    setSearchParams: (state, action) => {
      state.searchParams = action.payload;
    },
    setSearchParamsResult: (state, action) => {
      state.searchParamsResult = action.payload;
    },
    setSearchProducts: (state, action) => {
      state.searchProducts = action.payload;
    },
      },
      });



      //// storeAPI.js
      
      export const findStore = async (storeId) => {
    let result = null;
    try {
        result = await axios.get(`http://localhost:5454/api/stores/${storeId}`);
    } catch (e) {
        console.log("Find store API error: " + e);
    }
    return result;
};